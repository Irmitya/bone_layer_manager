import bpy
import random
import string
from bpy.props import StringProperty
from .blmfuncs import ShowMessageBox


class WRITEUI_OT_writeui(bpy.types.Operator):
    '''Create Rig UI script file from current layout'''
    bl_idname = "bone_layer_man.write_rig_ui"
    bl_label = "Hide Select of Selected"

    blm_rig_id: StringProperty(name="BLM Rig ID",
                               description="Rig ID Used by Bone Layer Manager",
                               default="")
    # generate random id for rig

    @classmethod
    def poll(self, context):
        return getattr(context.active_object, 'type', False) == 'ARMATURE'

    def execute(self, context):
        ac_ob = context.active_object
        scn = context.scene
        layout = self.layout
        blockstart = True
        endblock = False

        new_rig_id = ''.join([random.choice(string.ascii_lowercase + string.digits) for _ in range(12)])

        # Check for Rig ID and assign if not present
        try:
            set_rig_id = ac_ob.data['blm_rig_id']
        except:
            ac_ob.data['blm_rig_id'] = new_rig_id

        set_rig_id = ac_ob.data['blm_rig_id']

        text = bpy.data.texts.new('Rig_UI.py')

        ##############################

        text.write('# ***RigUIscript generated by Bone Layers Addon***''\n'
                   '\n'
                   'import bpy''\n'
                   '\n'
                   f'blm_rig_id = "{set_rig_id}"\n'
                   '\n'
                   '\n'
                   'class BLOP_PT_riguilayers(bpy.types.Panel):''\n'
                   '\t'"bl_space_type = 'VIEW_3D'"'\n'
                   '\t'"bl_region_type = 'UI'"'\n'
                   '\t'"bl_category = 'View'"'\n'
                   '\t'"bl_label = \"Rig Layers\""'\n'
                   # '\t'+("bl_idname = \"rig_"+str(set_rig_id)+".riglayers\"")+'\n'
                   '\t'"bl_idname = \"BLOP_PT_riguilayers\""'\n'
                   '\n'
                   '\t''@classmethod''\n'
                   '\t''def poll(self, context):''\n'
                   '\t''\t''try:''\n'
                   '\t''\t''\t''return (context.active_object.data.get(\"blm_rig_id\") == blm_rig_id)''\n'
                   '\t''\t''except (AttributeError, KeyError, TypeError):''\n'
                   '\t''\t''\t'"return False"'\n'
                   '\n'
                   '\t''def draw(self, context):''\n'
                   '\t''\t''layout = self.layout''\n'
                   '\t''\t''col = layout.column()''\n'
                   '\n')

        ##############################

        x = 1
        # Iterate through layers writing rows for the Rig UI
        while x < 33:
            blockstart = True
            i = 0

            while i < 33:
                name_id_prop = f"layer_name_{i}"
                rigui_id_prop = f"rigui_id_{i}"
                name = ac_ob.data.get(name_id_prop, "*NO NAME*")
                uselayer = ac_ob.data.get(rigui_id_prop, 0)

                # Set start of UI row
                if uselayer == x and endblock is False:
                    if blockstart is True:
                        text.write('\n')
                        text.write('\t''\t'"row = col.row()"'\n')
                        blockstart = False

                    while uselayer < (x + 1):
                        if uselayer == (x + 1):
                            continue
                        text.write('\t''\t'f"row.prop(context.active_object.data,'layers', index={i}, toggle=True, text='{name}')"'\n')

                        uselayer += 1
                    # Mark end of current row in iteration
                    if i == 32:
                        endblock = True

                i += 1

            x += 1

        ###############################

        text.write(
            '\n'
            '\n'"class BLOP_PT_customproperties(bpy.types.Panel):"'\n'
            '\t'"\"\"\"Creates a Rig Properties Panel (Pose Bone Custom Properties)\"\"\""'\n'
            '\t'"bl_category = \"View\""'\n'
            '\t'"bl_label = \"Rig Properties\""'\n'
            '\t'"bl_idname = \"BLOP_PT_customproperties\""'\n'
            '\t'"bl_space_type = 'VIEW_3D'"'\n'
            '\t'"bl_region_type = 'UI'"'\n'
            '\t'"bl_options = {'DEFAULT_CLOSED'}"'\n'
            '\n'
            '\t'"@classmethod"'\n'
            '\t'"def poll(self, context):"'\n'
            '\t''\t'"if context.mode != 'POSE':"'\n'
            '\t''\t''\t'"return False"'\n'
            '\n'
            '\t''\t'"try:"'\n'
            '\t''\t''\t'"return (context.active_object.type == 'ARMATURE')"'\n'
            '\t''\t'"except (TypeError):"'\n'
            '\t''\t''\t'"return False"'\n'
            '\n'
            '\t'"def draw(self, context):"'\n'
            '\t''\t'"layout = self.layout"'\n'
            '\t''\t'"pose_bones = context.active_object.pose.bones"'\n'
            '\t''\t'"try:"'\n'
            '\t''\t''\t'"selected_bones = [bone.name for bone in context.selected_pose_bones]"'\n'
            '\t''\t''\t'"selected_bones += [context.active_pose_bone.name]"'\n'
            '\t''\t'"except (AttributeError, TypeError):"'\n'
            '\t''\t''\t'"return"'\n'
            '\n'
            '\t''\t'"def assign_props(row, val, key):"'\n'
            '\t''\t''\t'"row.property = key"'\n'
            '\t''\t''\t'"row.data_path = \"active_pose_bone\""'\n'
            '\t''\t''\t'"try:"'\n'
            '\t''\t''\t''\t'"row.value = str(val)"'\n'
            '\t''\t''\t'"except:"'\n'
            '\t''\t''\t''\t'"pass"'\n'
            '\t''\t'"active_pose_bone = context.active_pose_bone"'\n'
            '\n'
            '\t'"# Iterate through selected bones add each prop property of each bone to the panel."'\n'
            '\n'
            '\t''\t'"for bone in context.selected_pose_bones:"'\n'
            '\t''\t''\t'"if len(bone.keys()) > 0:"'\n'
            '\t''\t''\t''\t'"box = layout.box()"'\n'
            '\t''\t''\t'"for key in bone.keys():"'\n'
            '\t''\t''\t''\t'"if key not in '_RNA_UI':"'\n'
            '\t''\t''\t''\t''\t'"val = bone.get(key, \"value\")"'\n'
            '\t''\t''\t''\t''\t'"row = box.row()"'\n'
            '\t''\t''\t''\t''\t'"split = row.split(align=True, factor=0.3)"'\n'
            '\t''\t''\t''\t''\t'"row = split.row(align=True)"'\n'
            '\t''\t''\t''\t''\t'"row.label(text=key, translate=False)"'\n'
            '\t''\t''\t''\t''\t'"row = split.row(align=True)"'\n'
            '\t''\t''\t''\t''\t'"row.prop(bone, f'[\"{key}\"]', text = \"\", slider=True)"'\n'
            )

        ##############################

        text.write('\n''\n'"classes = (BLOP_PT_riguilayers, BLOP_PT_customproperties, )"'\n''\n')

        text.write('register, unregister = bpy.utils.register_classes_factory(classes)''\n''\n')

        text.write("if __name__ == \"__main__\":"'\n')

        text.write('\t''register()')

        ShowMessageBox("Script file created in text editor", "Bone Layer Manager")

        return {'FINISHED'}
